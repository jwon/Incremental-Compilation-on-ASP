On a scale of 1 to 5, 1 being least, rate your experience with debuggers in general: 2
On a scale of 1 to 5, 1 being least, rate your experience with C++ debuggers: 2
On a scale of 1 to 5, 1 being least, rate your experience with Python debuggers: 2
On a scale of 1 to 5, 1 being least, rate your experience with C++/Python interoperation: 2-3
On a scale of 1 to 5, 1 being least, rate your experience with the SEJITS platform: 3

Short answer questions (brief answers are sufficient):

In the user interface, what was the difference between the blue and red text?
Python code was represented in the blue text, and C++ code was represented in the blue text.


In the user interface, what did the blue and red arrows indicate?
The blue arrows and red arrows indicated where the code was currently being executed by the debugger


In the first example, can you explain what the program was doing?
The program was performing a calculation over the neighbors on a grid

In the second example, can you explain what the program was doing?
In this example, the program was also performing a calculation over the neighbors of a grid.


Which interface did you prefer and why?
I preferred the parallel Python/C++ debugger. It was easier to recognize where in the code the error was occuring.



If you had been able to use your favorite debugger, what additional debugger features would you have considered using?
Personally, I haven't used debuggers too thoroughly in the past, so I am not sure what additional features I would have liked.
I haven't used any more features of debuggers than what you already included in your C++/Python debugger.
